# vim:ft=zsh ts=2 sw=2 sts=2

autoload colors; colors;
setopt prompt_subst

parse_git_dirty() {
  local GIT_STATUS=''
  GIT_STATUS=$(command git status -s 2> /dev/null | tail -n1)
  if [[ -n $GIT_STATUS ]]; then
    echo 1
  fi
}

parse_git_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev 2> /dev/null | head -n1 2> /dev/null)"
  echo ${ref#refs/heads/}
}

parse_git_changes() {
  if $(git remote 2> /dev/null | grep -iq 'origin') ;then
    local git_where="$(parse_git_branch)"
    behind=$(git rev-list HEAD..origin/${git_where} --count 2> /dev/null)
    ahead=$(git rev-list origin/${git_where}..HEAD --count 2> /dev/null)
    echo " ↑$ahead ↓$behind"
 else
    echo " ?"
  fi
}

CURRENT_BG='NONE'
SEGMENT_SEPARATOR='%{%2G%}'

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local b f
  [[ -n $1 ]] && b="$bg[$1]" || b="$bg[black]"
  [[ -n $2 ]] && f="$fg[$2]" || f="$fg[white]"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$b$fg[$CURRENT_BG]%}$SEGMENT_SEPARATOR%{$f%} "
  else
    echo -n "%{$b$f%}"
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

# Context: user@hostname (who am I and where am I)
prompt_context() {
  local c
	local user=`whoami`
  [[ "$user" == "jobsworker" ]] && c="$fg_bold[green]" || c="$fg_bold[blue]"	
  prompt_segment black default " %{%(!.$fg[red].)$c%}$user%{$reset_color%}@%m"
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{$reset_color$fg[$CURRENT_BG]%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{$reset_color%}"
  fi
  echo -n "%{$reset_color%}"
  CURRENT_BG=''
}

# Git: branch/detached head, dirty status
prompt_git() {
  local ref dirty mode repo_path
  repo_path=$(git rev-parse --git-dir 2>/dev/null)

  git rev-parse --is-inside-work-tree >/dev/null 2>&1

  if [ $? -eq 0 ]; then
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev 2> /dev/null | head -n1 2> /dev/null)"
    if [[ -n $dirty ]]; then
      prompt_segment red black
    else
      prompt_segment green black
    fi

    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
      mode=" <B>"
    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
      mode=" >M<"
    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
      mode=" >R>"
    fi

    setopt promptsubst
    echo -n "${ref/refs\/heads\//}$(parse_git_changes)${mode}"
	fi
}

# Dir: current working directory
prompt_dir() {
  prompt_segment blue black '%c'
}

prompt_time() {
  prompt_segment black default "[`date +%H:%M:%S`]"
}

## Main prompt
build_prompt() {
  RETVAL=$?
  prompt_time
  prompt_context
  prompt_dir
  prompt_git
  prompt_end
}

PROMPT='%{$reset_color%}$(build_prompt)%{$reset_color%} '
